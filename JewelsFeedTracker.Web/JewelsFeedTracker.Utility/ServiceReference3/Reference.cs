//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference3
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.axoneinfotech.com/", ConfigurationName="ServiceReference3.WebServiceSoap")]
    public interface WebServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.axoneinfotech.com/GetSearchDiamond_JSON", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSearchDiamond_JSONAsync(
                    string Shape, 
                    string Color, 
                    string Clarity, 
                    string Cut, 
                    string Polish, 
                    string Symm, 
                    string Flour, 
                    string Lab, 
                    string FromSize, 
                    string ToSize, 
                    string FromLength, 
                    string ToLength, 
                    string FromWidth, 
                    string ToWidth, 
                    string FromHeight, 
                    string ToHeight, 
                    string FromTablePer, 
                    string ToTablePer, 
                    string FromDepthPer, 
                    string ToDepthPer, 
                    string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.axoneinfotech.com/GetSearchDiamond_XML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetSearchDiamond_XMLAsync(
                    string Shape, 
                    string Color, 
                    string Clarity, 
                    string Cut, 
                    string Polish, 
                    string Symm, 
                    string Flour, 
                    string Lab, 
                    string FromSize, 
                    string ToSize, 
                    string FromLength, 
                    string ToLength, 
                    string FromWidth, 
                    string ToWidth, 
                    string FromHeight, 
                    string ToHeight, 
                    string FromTablePer, 
                    string ToTablePer, 
                    string FromDepthPer, 
                    string ToDepthPer, 
                    string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.axoneinfotech.com/GetSearchDiamond_Dataset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference3.ArrayOfXElement> GetSearchDiamond_DatasetAsync(
                    string Shape, 
                    string Color, 
                    string Clarity, 
                    string Cut, 
                    string Polish, 
                    string Symm, 
                    string Flour, 
                    string Lab, 
                    string FromSize, 
                    string ToSize, 
                    string FromLength, 
                    string ToLength, 
                    string FromWidth, 
                    string ToWidth, 
                    string FromHeight, 
                    string ToHeight, 
                    string FromTablePer, 
                    string ToTablePer, 
                    string FromDepthPer, 
                    string ToDepthPer, 
                    string Token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface WebServiceSoapChannel : ServiceReference3.WebServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class WebServiceSoapClient : System.ServiceModel.ClientBase<ServiceReference3.WebServiceSoap>, ServiceReference3.WebServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WebServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(WebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), WebServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetSearchDiamond_JSONAsync(
                    string Shape, 
                    string Color, 
                    string Clarity, 
                    string Cut, 
                    string Polish, 
                    string Symm, 
                    string Flour, 
                    string Lab, 
                    string FromSize, 
                    string ToSize, 
                    string FromLength, 
                    string ToLength, 
                    string FromWidth, 
                    string ToWidth, 
                    string FromHeight, 
                    string ToHeight, 
                    string FromTablePer, 
                    string ToTablePer, 
                    string FromDepthPer, 
                    string ToDepthPer, 
                    string Token)
        {
            return base.Channel.GetSearchDiamond_JSONAsync(Shape, Color, Clarity, Cut, Polish, Symm, Flour, Lab, FromSize, ToSize, FromLength, ToLength, FromWidth, ToWidth, FromHeight, ToHeight, FromTablePer, ToTablePer, FromDepthPer, ToDepthPer, Token);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetSearchDiamond_XMLAsync(
                    string Shape, 
                    string Color, 
                    string Clarity, 
                    string Cut, 
                    string Polish, 
                    string Symm, 
                    string Flour, 
                    string Lab, 
                    string FromSize, 
                    string ToSize, 
                    string FromLength, 
                    string ToLength, 
                    string FromWidth, 
                    string ToWidth, 
                    string FromHeight, 
                    string ToHeight, 
                    string FromTablePer, 
                    string ToTablePer, 
                    string FromDepthPer, 
                    string ToDepthPer, 
                    string Token)
        {
            return base.Channel.GetSearchDiamond_XMLAsync(Shape, Color, Clarity, Cut, Polish, Symm, Flour, Lab, FromSize, ToSize, FromLength, ToLength, FromWidth, ToWidth, FromHeight, ToHeight, FromTablePer, ToTablePer, FromDepthPer, ToDepthPer, Token);
        }
        
        public System.Threading.Tasks.Task<ServiceReference3.ArrayOfXElement> GetSearchDiamond_DatasetAsync(
                    string Shape, 
                    string Color, 
                    string Clarity, 
                    string Cut, 
                    string Polish, 
                    string Symm, 
                    string Flour, 
                    string Lab, 
                    string FromSize, 
                    string ToSize, 
                    string FromLength, 
                    string ToLength, 
                    string FromWidth, 
                    string ToWidth, 
                    string FromHeight, 
                    string ToHeight, 
                    string FromTablePer, 
                    string ToTablePer, 
                    string FromDepthPer, 
                    string ToDepthPer, 
                    string Token)
        {
            return base.Channel.GetSearchDiamond_DatasetAsync(Shape, Color, Clarity, Cut, Polish, Symm, Flour, Lab, FromSize, ToSize, FromLength, ToLength, FromWidth, ToWidth, FromHeight, ToHeight, FromTablePer, ToTablePer, FromDepthPer, ToDepthPer, Token);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.WebServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WebServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://api.srd.world/webservice.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.WebServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://api.srd.world/webservice.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            WebServiceSoap,
            
            WebServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.2")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
